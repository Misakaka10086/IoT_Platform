name: Build and Upload ESP32 Firmware to Backblaze B2

on:
  push:
    branches:
      - esp32
  pull_request:
    branches:
      - esp32
  workflow_dispatch:

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        board:
          - esp32-c3-devkitm-1
          - esp32-s3-devkitm-1
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache pip and PlatformIO
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
            ~/.platformio/packages
            ~/.platformio/platforms
            ~/.platformio/toolchains
          key: ${{ runner.os }}-pio

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install PlatformIO Core
        run: pip install --upgrade platformio

      # Create secrets.h file
      - name: Create secrets.h
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          WIFI_SSID: ${{ secrets.WIFI_SSID }}
          WIFI_PASSWORD: ${{ secrets.WIFI_PASSWORD }}
          MQTT_TOPIC_COMMAND: ${{ secrets.MQTT_TOPIC_COMMAND }}
          MQTT_TOPIC_STATUS: ${{ secrets.MQTT_TOPIC_STATUS }}
        run: |
          cat > ESP32/include/secrets.h << EOL
          #ifndef SECRETS_H
          #define SECRETS_H

          #define SERVER_HOST "${SERVER_HOST}"
          #define WIFI_SSID "${WIFI_SSID}"
          #define WIFI_PASSWORD "${WIFI_PASSWORD}"
          #define MQTT_TOPIC_COMMAND "${MQTT_TOPIC_COMMAND}"
          #define MQTT_TOPIC_STATUS "${MQTT_TOPIC_STATUS}"

          #endif // SECRETS_H
          EOL

      # Build the ESP32 firmware for the specified board
      - name: Build ESP32 Firmware
        run: |
          cd ESP32
          platformio run -e ${{ matrix.board }}

      - name: Check or Install AWS CLI
        run: |
          if ! command -v aws &>/dev/null; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install
          else
            echo "AWS CLI already installed: $(aws --version)"
          fi

      # Configure AWS CLI for Backblaze B2
      - name: Configure AWS CLI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.OSS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set default.s3.signature_version s3v4
          aws configure set default.output json

      # # Upload firmware to Backblaze B2
      # - name: Upload Firmware to B2
      #   env:
      #     B2_BUCKET_NAME: ${{ secrets.OSS_BUCKET_NAME }}
      #     B2_ENDPOINT_URL: ${{ secrets.OSS_ENDPOINT_URL }}
      #   run: |
      #     cd ESP32
      #     FIRMWARE_FILE=".pio/build/${{ matrix.board }}/firmware.bin"
      #     UPLOAD_PATH="s3://$B2_BUCKET_NAME/firmware/${{ matrix.board }}/firmware.bin"
      #     aws s3 cp "$FIRMWARE_FILE" "$UPLOAD_PATH" --endpoint-url "$B2_ENDPOINT_URL"

      # Calculate SHA256 and Git commit SHA, and upload firmware with metadata to Backblaze B2
      - name: Upload Firmware with SHA256 and Git Commit Metadata to B2
        env:
          B2_BUCKET_NAME: ${{ secrets.OSS_BUCKET_NAME }}
          B2_ENDPOINT_URL: ${{ secrets.OSS_ENDPOINT_URL }}
        run: |
          cd ESP32
          FIRMWARE_FILE=".pio/build/${{ matrix.board }}/firmware.bin"
          SHA256=$(sha256sum "$FIRMWARE_FILE" | cut -d ' ' -f 1)
          GIT_COMMIT_SHA=$(git rev-parse HEAD)
          UPLOAD_PATH="s3://$B2_BUCKET_NAME/firmware/${{ matrix.board }}/${GIT_COMMIT_SHA}_${SHA256}_firmware.bin"
          aws s3 cp "$FIRMWARE_FILE" "$UPLOAD_PATH" --endpoint-url "$B2_ENDPOINT_URL" --metadata "sha256=$SHA256,git-commit-sha=$GIT_COMMIT_SHA"
